{"block_file": {"data_exporters/export_departments.sql:data_exporter:sql:export departments": {"content": "-- Docs: https://docs.mage.ai/guides/sql-blocks\nCREATE TABLE departments (\n    dept_no VARCHAR(10) PRIMARY KEY,  -- Define the primary key\n    dept_name VARCHAR(255)            -- Define the dept_name with data type\n);\n\nINSERT INTO departments (dept_no, dept_name)\nSELECT \n    dept_no, dept_name\nFROM {{ df_1 }};", "file_path": "data_exporters/export_departments.sql", "language": "sql", "type": "data_exporter", "uuid": "export_departments"}, "data_exporters/export_department_employee.sql:data_exporter:sql:export department employee": {"content": "-- Docs: https://docs.mage.ai/guides/sql-blocks\nCREATE TABLE department_employee (\n  emp_no integer,\n  dept_no varchar(10),\n  PRIMARY KEY (emp_no, dept_no),\n  FOREIGN KEY (emp_no) REFERENCES employees(emp_no) ON DELETE CASCADE,\n  FOREIGN KEY (dept_no) REFERENCES departments(dept_no) ON DELETE CASCADE\n);\n\nINSERT INTO department_employee (emp_no, dept_no)\nSELECT \n    emp_no ,\n    dept_no \nFROM {{ df_1 }};", "file_path": "data_exporters/export_department_employee.sql", "language": "sql", "type": "data_exporter", "uuid": "export_department_employee"}, "data_exporters/export_department_manager.sql:data_exporter:sql:export department manager": {"content": "-- Docs: https://docs.mage.ai/guides/sql-blocks\nCREATE TABLE department_manager (\n  emp_no integer primary key,\n  dept_no varchar(10),\n  FOREIGN KEY (emp_no) REFERENCES employees(emp_no) ON DELETE CASCADE,\n  FOREIGN KEY (dept_no) REFERENCES departments(dept_no) ON DELETE CASCADE\n);\n\nINSERT INTO department_manager (emp_no, dept_no)\nSELECT \n    emp_no ,\n    dept_no \nFROM {{ df_1 }};", "file_path": "data_exporters/export_department_manager.sql", "language": "sql", "type": "data_exporter", "uuid": "export_department_manager"}, "data_exporters/export_employees.sql:data_exporter:sql:export employees": {"content": "-- Docs: https://docs.mage.ai/guides/sql-blocks\nCREATE TABLE employees (\n  emp_no integer primary key,\n  emp_title_id varchar(50),\n  birth_date date,\n  first_name varchar(50),\n  last_name varchar(50),\n  sex varchar(10),\n  hire_date date,\n  FOREIGN KEY (emp_title_id) REFERENCES titles(title_id) ON DELETE CASCADE\n);\n\nINSERT INTO employees (emp_no, emp_title_id, birth_date, first_name,\nlast_name, sex, hire_date)\nSELECT \n    emp_no,\n    emp_title_id,\n    STR_TO_DATE(birth_date, '%m/%d/%Y') AS birth_date,   -- Convert from MM/DD/YYYY to YYYY-MM-DD\n    first_name,\n    last_name,\n    sex,\n    STR_TO_DATE(hire_date, '%m/%d/%Y') AS hire_date \nFROM {{ df_1 }};", "file_path": "data_exporters/export_employees.sql", "language": "sql", "type": "data_exporter", "uuid": "export_employees"}, "data_exporters/export_salaries.sql:data_exporter:sql:export salaries": {"content": "-- Docs: https://docs.mage.ai/guides/sql-blocks\nCREATE TABLE salaries (\n  emp_no integer primary key,\n  salary integer,\n  FOREIGN KEY (emp_no) REFERENCES employees(emp_no) ON DELETE CASCADE\n);\n\nINSERT INTO salaries (emp_no, salary)\nSELECT \n    emp_no,\n    salary\nFROM {{ df_1 }};", "file_path": "data_exporters/export_salaries.sql", "language": "sql", "type": "data_exporter", "uuid": "export_salaries"}, "data_exporters/export_titles.sql:data_exporter:sql:export titles": {"content": "-- Docs: https://docs.mage.ai/guides/sql-blocks\nCREATE TABLE titles (\n  title_id varchar(20) primary key,\n  title varchar(50)\n\n);\n\nINSERT INTO titles (title_id, title)\nSELECT \n    title_id,\n    title\nFROM {{ df_1 }};", "file_path": "data_exporters/export_titles.sql", "language": "sql", "type": "data_exporter", "uuid": "export_titles"}, "data_loaders/dawn_illusion.sql:data_loader:sql:dawn illusion": {"content": "-- Docs: https://docs.mage.ai/guides/sql-blocks\ndrop table departments", "file_path": "data_loaders/dawn_illusion.sql", "language": "sql", "type": "data_loader", "uuid": "dawn_illusion"}, "data_loaders/departments.py:data_loader:python:departments": {"content": "from mage_ai.io.file import FileIO\nif 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@data_loader\ndef load_data_from_file(*args, **kwargs):\n    \"\"\"\n    Template for loading data from filesystem.\n    Load data from 1 file or multiple file directories.\n\n    For multiple directories, use the following:\n        FileIO().load(file_directories=['dir_1', 'dir_2'])\n\n    Docs: https://docs.mage.ai/design/data-loading#fileio\n    \"\"\"\n    filepath = '/home/src/my_project/data/departments.csv'\n\n    return FileIO().load(filepath)\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'\n", "file_path": "data_loaders/departments.py", "language": "python", "type": "data_loader", "uuid": "departments"}, "data_loaders/load_department_employee.py:data_loader:python:load department employee": {"content": "from mage_ai.io.file import FileIO\nif 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@data_loader\ndef load_data_from_file(*args, **kwargs):\n    \"\"\"\n    Template for loading data from filesystem.\n    Load data from 1 file or multiple file directories.\n\n    For multiple directories, use the following:\n        FileIO().load(file_directories=['dir_1', 'dir_2'])\n\n    Docs: https://docs.mage.ai/design/data-loading#fileio\n    \"\"\"\n    filepath = '/home/src/my_project/data/dept_emp.csv'\n\n    return FileIO().load(filepath)\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'\n", "file_path": "data_loaders/load_department_employee.py", "language": "python", "type": "data_loader", "uuid": "load_department_employee"}, "data_loaders/load_department_manager.py:data_loader:python:load department manager": {"content": "from mage_ai.io.file import FileIO\nif 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@data_loader\ndef load_data_from_file(*args, **kwargs):\n    \"\"\"\n    Template for loading data from filesystem.\n    Load data from 1 file or multiple file directories.\n\n    For multiple directories, use the following:\n        FileIO().load(file_directories=['dir_1', 'dir_2'])\n\n    Docs: https://docs.mage.ai/design/data-loading#fileio\n    \"\"\"\n    filepath = '/home/src/my_project/data/dept_manager.csv'\n\n    return FileIO().load(filepath)\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'\n", "file_path": "data_loaders/load_department_manager.py", "language": "python", "type": "data_loader", "uuid": "load_department_manager"}, "data_loaders/load_employees.py:data_loader:python:load employees": {"content": "from mage_ai.io.file import FileIO\nif 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@data_loader\ndef load_data_from_file(*args, **kwargs):\n    \"\"\"\n    Template for loading data from filesystem.\n    Load data from 1 file or multiple file directories.\n\n    For multiple directories, use the following:\n        FileIO().load(file_directories=['dir_1', 'dir_2'])\n\n    Docs: https://docs.mage.ai/design/data-loading#fileio\n    \"\"\"\n    filepath = '/home/src/my_project/data/employees.csv'\n\n    return FileIO().load(filepath)\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'\n", "file_path": "data_loaders/load_employees.py", "language": "python", "type": "data_loader", "uuid": "load_employees"}, "data_loaders/load_salaries.py:data_loader:python:load salaries": {"content": "from mage_ai.io.file import FileIO\nif 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@data_loader\ndef load_data_from_file(*args, **kwargs):\n    \"\"\"\n    Template for loading data from filesystem.\n    Load data from 1 file or multiple file directories.\n\n    For multiple directories, use the following:\n        FileIO().load(file_directories=['dir_1', 'dir_2'])\n\n    Docs: https://docs.mage.ai/design/data-loading#fileio\n    \"\"\"\n    filepath = '/home/src/my_project/data/salaries.csv'\n\n    return FileIO().load(filepath)\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'\n", "file_path": "data_loaders/load_salaries.py", "language": "python", "type": "data_loader", "uuid": "load_salaries"}, "data_loaders/load_titles.py:data_loader:python:load titles": {"content": "from mage_ai.io.file import FileIO\nif 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@data_loader\ndef load_data_from_file(*args, **kwargs):\n    \"\"\"\n    Template for loading data from filesystem.\n    Load data from 1 file or multiple file directories.\n\n    For multiple directories, use the following:\n        FileIO().load(file_directories=['dir_1', 'dir_2'])\n\n    Docs: https://docs.mage.ai/design/data-loading#fileio\n    \"\"\"\n    filepath = '/home/src/my_project/data/titles.csv'\n\n    return FileIO().load(filepath)\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'\n", "file_path": "data_loaders/load_titles.py", "language": "python", "type": "data_loader", "uuid": "load_titles"}, "data_loaders/question_1_answer.sql:data_loader:sql:question 1 answer": {"content": "-- Docs: https://docs.mage.ai/guides/sql-blocks\n\n-- 1. List the following details of each employee: \n-- employee number, last name, first name, sex, and salary.\nselect e.emp_no as employee_number, last_name, first_name, sex, salary \nfrom employees as e \njoin\nsalaries as s\nON\ne.emp_no = s.emp_no\n;", "file_path": "data_loaders/question_1_answer.sql", "language": "sql", "type": "data_loader", "uuid": "question_1_answer"}, "data_loaders/question_2_answer.sql:data_loader:sql:question 2 answer": {"content": "-- Docs: https://docs.mage.ai/guides/sql-blocks\n-- 2. List first name, last name, and hire date for employees who were\n--  hired in 1986.\nselect first_name, last_name, hire_date\nfrom employees\nwhere year(hire_date) = 1986;", "file_path": "data_loaders/question_2_answer.sql", "language": "sql", "type": "data_loader", "uuid": "question_2_answer"}, "data_loaders/question_3_answer.sql:data_loader:sql:question 3 answer": {"content": "-- Docs: https://docs.mage.ai/guides/sql-blocks\n-- 3. List the manager of each department with the following information:\n--  department number, department name, the manager's employee number,\n--   last name, first name.\nselect d.dept_no as department_number, dept_name as department_name,\ne.emp_no as employee_number, last_name, first_name\nfrom employees as e\njoin\ndepartment_manager as dm\nON\ne.emp_no = dm.emp_no\njoin\ndepartments as d\nON\ndm.dept_no = d.dept_no", "file_path": "data_loaders/question_3_answer.sql", "language": "sql", "type": "data_loader", "uuid": "question_3_answer"}, "data_loaders/question_4_answer.sql:data_loader:sql:question 4 answer": {"content": "-- Docs: https://docs.mage.ai/guides/sql-blocks\n-- 4. List the department of each employee with the following information: \n-- employee number, last name, first name, and department name.\nselect e.emp_no as employee_number, last_name, first_name, dept_name as \ndepartment_name\nfrom employees as e\njoin\ndepartment_employee as de\nON\ne.emp_no = de.emp_no\njoin\ndepartments as d\nON\nd.dept_no = de.dept_no", "file_path": "data_loaders/question_4_answer.sql", "language": "sql", "type": "data_loader", "uuid": "question_4_answer"}, "data_loaders/question_5_answer.sql:data_loader:sql:question 5 answer": {"content": "-- Docs: https://docs.mage.ai/guides/sql-blocks\n-- 5. List first name, last name, and sex for employees whose \n-- first name is \"Hercules\" and last names begin with \"B.\"\nselect first_name, last_name, sex\nfrom employees\nwhere first_name = 'Hercules' and last_name like 'B%'", "file_path": "data_loaders/question_5_answer.sql", "language": "sql", "type": "data_loader", "uuid": "question_5_answer"}, "data_loaders/question_6_answer.sql:data_loader:sql:question 6 answer": {"content": "-- Docs: https://docs.mage.ai/guides/sql-blocks\n-- 6. List all employees in the Sales department, including their \n-- employee number, last name, first name, and department name.\nselect e.emp_no as employee_number, last_name, first_name,\ndept_name as department_name\nfrom employees as e\njoin\ndepartment_employee as de\nON\ne.emp_no = de.emp_no\njoin\ndepartments as d\nON\nde.dept_no = d.dept_no\nand\ndept_name = 'Sales';", "file_path": "data_loaders/question_6_answer.sql", "language": "sql", "type": "data_loader", "uuid": "question_6_answer"}, "data_loaders/question_7_answer.sql:data_loader:sql:question 7 answer": {"content": "-- -- Docs: https://docs.mage.ai/guides/sql-blocks\n-- 7. List all employees in the Sales and Development departments,\n--  including their employee number, last name, first name, and department name.\nselect e.emp_no as employee_number, last_name, first_name,\ndept_name as department_name\nfrom employees as e\njoin\ndepartment_employee as de\nON\ne.emp_no = de.emp_no\njoin\ndepartments as d\nON\nde.dept_no = d.dept_no\nand\n(dept_name = 'Sales' or dept_name = 'Development');", "file_path": "data_loaders/question_7_answer.sql", "language": "sql", "type": "data_loader", "uuid": "question_7_answer"}, "data_loaders/question_8_answers.sql:data_loader:sql:question 8 answers": {"content": "-- Docs: https://docs.mage.ai/guides/sql-blocks\n-- 8. In descending order, list the frequency count of employee last names,\n--  i.e., how many employees share each last name.\nselect last_name, count(first_name) as frequency_count_last_name\nfrom employees\ngroup by last_name\norder by count(first_name) desc;", "file_path": "data_loaders/question_8_answers.sql", "language": "sql", "type": "data_loader", "uuid": "question_8_answers"}, "data_loaders/stylish_healer.sql:data_loader:sql:stylish healer": {"content": "-- Docs: https://docs.mage.ai/guides/sql-blocks\nCREATE TABLE departments (\n    dept_no VARCHAR(10) PRIMARY KEY,  -- Define the primary key\n    dept_name VARCHAR(255)            -- Define the dept_name with data type\n);\n\nINSERT INTO departments (dept_no, dept_name)\nSELECT \n    dept_no, dept_name\nFROM {{ df_1 }};", "file_path": "data_loaders/stylish_healer.sql", "language": "sql", "type": "data_loader", "uuid": "stylish_healer"}, "data_loaders/test_connection.sql:data_loader:sql:test connection": {"content": "-- Docs: https://docs.mage.ai/guides/sql-blocks\nselect 1;", "file_path": "data_loaders/test_connection.sql", "language": "sql", "type": "data_loader", "uuid": "test_connection"}, "transformers/fill_in_missing_values.py:transformer:python:fill in missing values": {"content": "from pandas import DataFrame\nimport math\n\nif 'transformer' not in globals():\n    from mage_ai.data_preparation.decorators import transformer\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\ndef select_number_columns(df: DataFrame) -> DataFrame:\n    return df[['Age', 'Fare', 'Parch', 'Pclass', 'SibSp', 'Survived']]\n\n\ndef fill_missing_values_with_median(df: DataFrame) -> DataFrame:\n    for col in df.columns:\n        values = sorted(df[col].dropna().tolist())\n        median_value = values[math.floor(len(values) / 2)]\n        df[[col]] = df[[col]].fillna(median_value)\n    return df\n\n\n@transformer\ndef transform_df(df: DataFrame, *args, **kwargs) -> DataFrame:\n    \"\"\"\n    Template code for a transformer block.\n\n    Add more parameters to this function if this block has multiple parent blocks.\n    There should be one parameter for each output variable from each parent block.\n\n    Args:\n        df (DataFrame): Data frame from parent block.\n\n    Returns:\n        DataFrame: Transformed data frame\n    \"\"\"\n    # Specify your transformation logic here\n\n    return fill_missing_values_with_median(select_number_columns(df))\n\n\n@test\ndef test_output(df) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert df is not None, 'The output is undefined'\n", "file_path": "transformers/fill_in_missing_values.py", "language": "python", "type": "transformer", "uuid": "fill_in_missing_values"}, "pipelines/wisr_challenge_pipeline/metadata.yaml:pipeline:yaml:wisr challenge pipeline/metadata": {"content": "blocks:\n- all_upstream_blocks_executed: true\n  color: null\n  configuration:\n    data_provider: mysql\n    data_provider_profile: default\n    dbt: {}\n    disable_query_preprocessing: false\n    export_write_policy: append\n    limit: 1000\n    use_raw_sql: true\n  downstream_blocks:\n  - load_titles\n  - departments\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: sql\n  name: test_connection\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_loader\n  upstream_blocks: []\n  uuid: test_connection\n- all_upstream_blocks_executed: true\n  color: null\n  configuration:\n    data_provider: mysql\n    data_provider_profile: default\n    export_write_policy: append\n  downstream_blocks:\n  - export_departments\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: python\n  name: departments\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_loader\n  upstream_blocks:\n  - test_connection\n  uuid: departments\n- all_upstream_blocks_executed: true\n  color: null\n  configuration:\n    data_provider: mysql\n    data_provider_profile: default\n    dbt: {}\n    disable_query_preprocessing: false\n    export_write_policy: append\n    limit: 1000\n    use_raw_sql: true\n  downstream_blocks:\n  - load_department_manager\n  - load_department_employee\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: sql\n  name: export departments\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_exporter\n  upstream_blocks:\n  - departments\n  uuid: export_departments\n- all_upstream_blocks_executed: true\n  color: null\n  configuration: {}\n  downstream_blocks:\n  - export_department_employee\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: python\n  name: load department_employee\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_loader\n  upstream_blocks:\n  - export_employees\n  - export_departments\n  uuid: load_department_employee\n- all_upstream_blocks_executed: true\n  color: null\n  configuration:\n    data_provider: mysql\n    data_provider_profile: default\n    dbt: {}\n    disable_query_preprocessing: false\n    export_write_policy: append\n    limit: 1000\n    use_raw_sql: true\n  downstream_blocks:\n  - question_1_answer\n  - question_2_answer\n  - question_3_answer\n  - question_4_answer\n  - question_5_answer\n  - question_6_answer\n  - question_7_answer\n  - question_8_answers\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: sql\n  name: export department_employee\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_exporter\n  upstream_blocks:\n  - load_department_employee\n  uuid: export_department_employee\n- all_upstream_blocks_executed: true\n  color: null\n  configuration: {}\n  downstream_blocks:\n  - export_department_manager\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: python\n  name: load department_manager\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_loader\n  upstream_blocks:\n  - export_employees\n  - export_departments\n  uuid: load_department_manager\n- all_upstream_blocks_executed: true\n  color: null\n  configuration:\n    data_provider: mysql\n    data_provider_profile: default\n    dbt: {}\n    disable_query_preprocessing: false\n    export_write_policy: append\n    limit: 1000\n    use_raw_sql: true\n  downstream_blocks:\n  - question_5_answer\n  - question_1_answer\n  - question_2_answer\n  - question_3_answer\n  - question_4_answer\n  - question_6_answer\n  - question_7_answer\n  - question_8_answers\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: sql\n  name: export department_manager\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_exporter\n  upstream_blocks:\n  - load_department_manager\n  uuid: export_department_manager\n- all_upstream_blocks_executed: true\n  color: null\n  configuration: {}\n  downstream_blocks:\n  - export_employees\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: python\n  name: load employees\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_loader\n  upstream_blocks:\n  - export_titles\n  uuid: load_employees\n- all_upstream_blocks_executed: true\n  color: null\n  configuration:\n    data_provider: mysql\n    data_provider_profile: default\n    dbt: {}\n    disable_query_preprocessing: false\n    export_write_policy: append\n    limit: 1000\n    use_raw_sql: true\n  downstream_blocks:\n  - load_department_employee\n  - load_department_manager\n  - load_salaries\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: sql\n  name: export employees\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_exporter\n  upstream_blocks:\n  - load_employees\n  uuid: export_employees\n- all_upstream_blocks_executed: true\n  color: null\n  configuration: {}\n  downstream_blocks:\n  - export_salaries\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: python\n  name: load salaries\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_loader\n  upstream_blocks:\n  - export_employees\n  uuid: load_salaries\n- all_upstream_blocks_executed: true\n  color: null\n  configuration:\n    data_provider: mysql\n    data_provider_profile: default\n    dbt: {}\n    disable_query_preprocessing: false\n    export_write_policy: append\n    limit: 1000\n    use_raw_sql: true\n  downstream_blocks:\n  - question_3_answer\n  - question_4_answer\n  - question_5_answer\n  - question_6_answer\n  - question_7_answer\n  - question_1_answer\n  - question_2_answer\n  - question_8_answers\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: sql\n  name: export salaries\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_exporter\n  upstream_blocks:\n  - load_salaries\n  uuid: export_salaries\n- all_upstream_blocks_executed: true\n  color: null\n  configuration: {}\n  downstream_blocks:\n  - export_titles\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: python\n  name: load titles\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_loader\n  upstream_blocks:\n  - test_connection\n  uuid: load_titles\n- all_upstream_blocks_executed: true\n  color: null\n  configuration:\n    data_provider: mysql\n    data_provider_profile: default\n    dbt: {}\n    disable_query_preprocessing: false\n    export_write_policy: append\n    limit: 1000\n    use_raw_sql: true\n  downstream_blocks:\n  - load_employees\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: sql\n  name: export titles\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_exporter\n  upstream_blocks:\n  - load_titles\n  uuid: export_titles\n- all_upstream_blocks_executed: true\n  color: null\n  configuration:\n    data_provider: mysql\n    data_provider_profile: default\n    dbt: {}\n    disable_query_preprocessing: false\n    export_write_policy: append\n    file_path: data_loaders/question_1_answer.sql\n    file_source:\n      path: data_loaders/question_1_answer.sql\n    limit: 1000\n    use_raw_sql: true\n  downstream_blocks: []\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: sql\n  name: Question 1 Answer\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_loader\n  upstream_blocks:\n  - export_department_employee\n  - export_department_manager\n  - export_salaries\n  uuid: question_1_answer\n- all_upstream_blocks_executed: true\n  color: null\n  configuration:\n    data_provider: mysql\n    data_provider_profile: default\n    dbt: {}\n    disable_query_preprocessing: false\n    export_write_policy: append\n    limit: 1000\n    use_raw_sql: true\n  downstream_blocks: []\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: sql\n  name: Question 2 answer\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_loader\n  upstream_blocks:\n  - export_department_employee\n  - export_department_manager\n  - export_salaries\n  uuid: question_2_answer\n- all_upstream_blocks_executed: true\n  color: null\n  configuration:\n    data_provider: mysql\n    data_provider_profile: default\n    dbt: {}\n    disable_query_preprocessing: false\n    export_write_policy: append\n    limit: 1000\n    use_raw_sql: true\n  downstream_blocks: []\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: sql\n  name: question_3_answer\n  retry_config: null\n  status: updated\n  timeout: null\n  type: data_loader\n  upstream_blocks:\n  - export_department_employee\n  - export_department_manager\n  - export_salaries\n  uuid: question_3_answer\n- all_upstream_blocks_executed: true\n  color: null\n  configuration:\n    data_provider: mysql\n    data_provider_profile: default\n    dbt: {}\n    disable_query_preprocessing: false\n    export_write_policy: append\n    limit: 1000\n    use_raw_sql: true\n  downstream_blocks: []\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: sql\n  name: question_4_answer\n  retry_config: null\n  status: updated\n  timeout: null\n  type: data_loader\n  upstream_blocks:\n  - export_department_employee\n  - export_department_manager\n  - export_salaries\n  uuid: question_4_answer\n- all_upstream_blocks_executed: true\n  color: null\n  configuration:\n    data_provider: mysql\n    data_provider_profile: default\n    dbt: {}\n    disable_query_preprocessing: false\n    export_write_policy: append\n    limit: 1000\n    use_raw_sql: true\n  downstream_blocks: []\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: sql\n  name: question_5_answer\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_loader\n  upstream_blocks:\n  - export_department_employee\n  - export_department_manager\n  - export_salaries\n  uuid: question_5_answer\n- all_upstream_blocks_executed: true\n  color: null\n  configuration:\n    data_provider: mysql\n    data_provider_profile: default\n    dbt: {}\n    disable_query_preprocessing: false\n    export_write_policy: append\n    limit: 1000\n    use_raw_sql: true\n  downstream_blocks: []\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: sql\n  name: question_6_answer\n  retry_config: null\n  status: updated\n  timeout: null\n  type: data_loader\n  upstream_blocks:\n  - export_department_employee\n  - export_department_manager\n  - export_salaries\n  uuid: question_6_answer\n- all_upstream_blocks_executed: true\n  color: null\n  configuration:\n    data_provider: mysql\n    data_provider_profile: default\n    dbt: {}\n    disable_query_preprocessing: false\n    export_write_policy: append\n    limit: 1000\n    use_raw_sql: true\n  downstream_blocks: []\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: sql\n  name: question_7_answer\n  retry_config: null\n  status: updated\n  timeout: null\n  type: data_loader\n  upstream_blocks:\n  - export_department_employee\n  - export_department_manager\n  - export_salaries\n  uuid: question_7_answer\n- all_upstream_blocks_executed: true\n  color: null\n  configuration:\n    data_provider: mysql\n    data_provider_profile: default\n    dbt: {}\n    disable_query_preprocessing: false\n    export_write_policy: append\n    limit: 1000\n    use_raw_sql: true\n  downstream_blocks: []\n  executor_config: null\n  executor_type: local_python\n  has_callback: false\n  language: sql\n  name: question_8_answers\n  retry_config: null\n  status: executed\n  timeout: null\n  type: data_loader\n  upstream_blocks:\n  - export_department_employee\n  - export_department_manager\n  - export_salaries\n  uuid: question_8_answers\ncache_block_output_in_memory: false\ncallbacks: []\nconcurrency_config: {}\nconditionals: []\ncreated_at: '2024-09-24 07:12:47.929906+00:00'\ndata_integration: null\ndescription: null\nexecutor_config: {}\nexecutor_count: 1\nexecutor_type: null\nextensions: {}\nname: Wisr challenge pipeline\nnotification_config: {}\nremote_variables_dir: null\nretry_config: {}\nrun_pipeline_in_one_process: false\nsettings:\n  triggers: null\nspark_config: {}\ntags: []\ntype: python\nuuid: wisr_challenge_pipeline\nvariables_dir: /home/src/mage_data/my_project\nwidgets: []\n", "file_path": "pipelines/wisr_challenge_pipeline/metadata.yaml", "language": "yaml", "type": "pipeline", "uuid": "wisr_challenge_pipeline/metadata"}, "pipelines/wisr_challenge_pipeline/__init__.py:pipeline:python:wisr challenge pipeline/  init  ": {"content": "", "file_path": "pipelines/wisr_challenge_pipeline/__init__.py", "language": "python", "type": "pipeline", "uuid": "wisr_challenge_pipeline/__init__"}}, "custom_block_template": {}, "mage_template": {"data_loaders/deltalake/s3.py:data_loader:python:Amazon S3:Load a Delta Table from Amazon S3.:Delta Lake": {"block_type": "data_loader", "description": "Load a Delta Table from Amazon S3.", "groups": ["Delta Lake"], "language": "python", "name": "Amazon S3", "path": "data_loaders/deltalake/s3.py"}, "data_loaders/deltalake/azure_blob_storage.py:data_loader:python:Azure Blob Storage:Load a Delta Table from Azure Blob Storage.:Delta Lake": {"block_type": "data_loader", "description": "Load a Delta Table from Azure Blob Storage.", "groups": ["Delta Lake"], "language": "python", "name": "Azure Blob Storage", "path": "data_loaders/deltalake/azure_blob_storage.py"}, "data_loaders/deltalake/gcs.py:data_loader:python:Google Cloud Storage:Load a Delta Table from Google Cloud Storage.:Delta Lake": {"block_type": "data_loader", "description": "Load a Delta Table from Google Cloud Storage.", "groups": ["Delta Lake"], "language": "python", "name": "Google Cloud Storage", "path": "data_loaders/deltalake/gcs.py"}, "data_loaders/mongodb.py:data_loader:python:MongoDB:Load data from MongoDB.:Databases (NoSQL)": {"block_type": "data_loader", "description": "Load data from MongoDB.", "groups": ["Databases (NoSQL)"], "language": "python", "name": "MongoDB", "path": "data_loaders/mongodb.py"}, "data_loaders/mssql.py:data_loader:python:MSSQL:Load data from MSSQL.:Databases": {"block_type": "data_loader", "description": "Load data from MSSQL.", "groups": ["Databases"], "language": "python", "name": "MSSQL", "path": "data_loaders/mssql.py"}, "data_exporters/deltalake/s3.py:data_exporter:python:Amazon S3:Export data to a Delta Table in Amazon S3.:Delta Lake": {"block_type": "data_exporter", "description": "Export data to a Delta Table in Amazon S3.", "groups": ["Delta Lake"], "language": "python", "name": "Amazon S3", "path": "data_exporters/deltalake/s3.py"}, "data_exporters/deltalake/azure_blob_storage.py:data_exporter:python:Azure Blob Storage:Export data to a Delta Table in Azure Blob Storage.:Delta Lake": {"block_type": "data_exporter", "description": "Export data to a Delta Table in Azure Blob Storage.", "groups": ["Delta Lake"], "language": "python", "name": "Azure Blob Storage", "path": "data_exporters/deltalake/azure_blob_storage.py"}, "data_exporters/deltalake/gcs.py:data_exporter:python:Google Cloud Storage:Export data to a Delta Table in Google Cloud Storage.:Delta Lake": {"block_type": "data_exporter", "description": "Export data to a Delta Table in Google Cloud Storage.", "groups": ["Delta Lake"], "language": "python", "name": "Google Cloud Storage", "path": "data_exporters/deltalake/gcs.py"}, "data_exporters/mongodb.py:data_exporter:python:MongoDB:Export data to MongoDB.": {"block_type": "data_exporter", "description": "Export data to MongoDB.", "language": "python", "name": "MongoDB", "path": "data_exporters/mongodb.py"}, "data_exporters/mssql.py:data_exporter:python:MSSQL:Export data to MSSQL.:Databases": {"block_type": "data_exporter", "description": "Export data to MSSQL.", "groups": ["Databases"], "language": "python", "name": "MSSQL", "path": "data_exporters/mssql.py"}, "data_loaders/orchestration/triggers/default.jinja:data_loader:python:Trigger pipeline:Trigger another pipeline to run.:Orchestration": {"block_type": "data_loader", "description": "Trigger another pipeline to run.", "groups": ["Orchestration"], "language": "python", "name": "Trigger pipeline", "path": "data_loaders/orchestration/triggers/default.jinja"}, "data_exporters/orchestration/triggers/default.jinja:data_exporter:python:Trigger pipeline:Trigger another pipeline to run.:Orchestration": {"block_type": "data_exporter", "description": "Trigger another pipeline to run.", "groups": ["Orchestration"], "language": "python", "name": "Trigger pipeline", "path": "data_exporters/orchestration/triggers/default.jinja"}, "callbacks/base.jinja:callback:python:Base template:Base template with empty functions.": {"block_type": "callback", "description": "Base template with empty functions.", "language": "python", "name": "Base template", "path": "callbacks/base.jinja"}, "callbacks/orchestration/triggers/default.jinja:callback:python:Trigger pipeline:Trigger another pipeline to run.:Orchestration": {"block_type": "callback", "description": "Trigger another pipeline to run.", "groups": ["Orchestration"], "language": "python", "name": "Trigger pipeline", "path": "callbacks/orchestration/triggers/default.jinja"}, "conditionals/base.jinja:conditional:python:Base template:Base template with empty functions.": {"block_type": "conditional", "description": "Base template with empty functions.", "language": "python", "name": "Base template", "path": "conditionals/base.jinja"}, "data_loaders/default.jinja:data_loader:python:Base template (generic)": {"block_type": "data_loader", "language": "python", "name": "Base template (generic)", "path": "data_loaders/default.jinja"}, "data_loaders/s3.py:data_loader:python:Amazon S3:Data lakes": {"block_type": "data_loader", "groups": ["Data lakes"], "language": "python", "name": "Amazon S3", "path": "data_loaders/s3.py"}, "data_loaders/azure_blob_storage.py:data_loader:python:Azure Blob Storage:Data lakes": {"block_type": "data_loader", "groups": ["Data lakes"], "language": "python", "name": "Azure Blob Storage", "path": "data_loaders/azure_blob_storage.py"}, "data_loaders/google_cloud_storage.py:data_loader:python:Google Cloud Storage:Data lakes": {"block_type": "data_loader", "groups": ["Data lakes"], "language": "python", "name": "Google Cloud Storage", "path": "data_loaders/google_cloud_storage.py"}, "data_loaders/redshift.py:data_loader:python:Amazon Redshift:Data warehouses": {"block_type": "data_loader", "groups": ["Data warehouses"], "language": "python", "name": "Amazon Redshift", "path": "data_loaders/redshift.py"}, "data_loaders/bigquery.py:data_loader:python:Google BigQuery:Load data from Google BigQuery.:Data warehouses": {"block_type": "data_loader", "description": "Load data from Google BigQuery.", "groups": ["Data warehouses"], "language": "python", "name": "Google BigQuery", "path": "data_loaders/bigquery.py"}, "data_loaders/snowflake.py:data_loader:python:Snowflake:Data warehouses": {"block_type": "data_loader", "groups": ["Data warehouses"], "language": "python", "name": "Snowflake", "path": "data_loaders/snowflake.py"}, "data_loaders/algolia.py:data_loader:python:Algolia:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "Algolia", "path": "data_loaders/algolia.py"}, "data_loaders/chroma.py:data_loader:python:Chroma:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "Chroma", "path": "data_loaders/chroma.py"}, "data_loaders/duckdb.py:data_loader:python:DuckDB:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "DuckDB", "path": "data_loaders/duckdb.py"}, "data_loaders/mysql.py:data_loader:python:MySQL:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "MySQL", "path": "data_loaders/mysql.py"}, "data_loaders/oracledb.py:data_loader:python:Oracle DB:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "Oracle DB", "path": "data_loaders/oracledb.py"}, "data_loaders/postgres.py:data_loader:python:PostgreSQL:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "PostgreSQL", "path": "data_loaders/postgres.py"}, "data_loaders/qdrant.py:data_loader:python:Qdrant:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "Qdrant", "path": "data_loaders/qdrant.py"}, "data_loaders/weaviate.py:data_loader:python:Weaviate:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "Weaviate", "path": "data_loaders/weaviate.py"}, "data_loaders/api.py:data_loader:python:API:Fetch data from an API request.": {"block_type": "data_loader", "description": "Fetch data from an API request.", "language": "python", "name": "API", "path": "data_loaders/api.py"}, "data_loaders/file.py:data_loader:python:Local file:Load data from a file on your machine.": {"block_type": "data_loader", "description": "Load data from a file on your machine.", "language": "python", "name": "Local file", "path": "data_loaders/file.py"}, "data_loaders/google_sheets.py:data_loader:python:Google Sheets:Load data from a worksheet in Google Sheets.": {"block_type": "data_loader", "description": "Load data from a worksheet in Google Sheets.", "language": "python", "name": "Google Sheets", "path": "data_loaders/google_sheets.py"}, "data_loaders/druid.py:data_loader:python:Druid": {"block_type": "data_loader", "language": "python", "name": "Druid", "path": "data_loaders/druid.py"}, "transformers/default.jinja:transformer:python:Base template (generic)": {"block_type": "transformer", "language": "python", "name": "Base template (generic)", "path": "transformers/default.jinja"}, "transformers/data_warehouse_transformer.jinja:transformer:python:Amazon Redshift:Data warehouses": {"block_type": "transformer", "groups": ["Data warehouses"], "language": "python", "name": "Amazon Redshift", "path": "transformers/data_warehouse_transformer.jinja", "template_variables": {"additional_args": "\n        loader.commit() # Permanently apply database changes", "data_source": "redshift", "data_source_handler": "Redshift"}}, "transformers/data_warehouse_transformer.jinja:transformer:python:Google BigQuery:Data warehouses": {"block_type": "transformer", "groups": ["Data warehouses"], "language": "python", "name": "Google BigQuery", "path": "transformers/data_warehouse_transformer.jinja", "template_variables": {"additional_args": "", "data_source": "bigquery", "data_source_handler": "BigQuery"}}, "transformers/data_warehouse_transformer.jinja:transformer:python:Snowflake:Data warehouses": {"block_type": "transformer", "groups": ["Data warehouses"], "language": "python", "name": "Snowflake", "path": "transformers/data_warehouse_transformer.jinja", "template_variables": {"additional_args": "\n        loader.commit() # Permanently apply database changes", "data_source": "snowflake", "data_source_handler": "Snowflake"}}, "transformers/data_warehouse_transformer.jinja:transformer:python:PostgreSQL:Databases": {"block_type": "transformer", "groups": ["Databases"], "language": "python", "name": "PostgreSQL", "path": "transformers/data_warehouse_transformer.jinja", "template_variables": {"additional_args": "\n        loader.commit() # Permanently apply database changes", "data_source": "postgres", "data_source_handler": "Postgres"}}, "transformers/transformer_actions/row/drop_duplicate.py:transformer:python:Drop duplicate rows:Row actions": {"block_type": "transformer", "groups": ["Row actions"], "language": "python", "name": "Drop duplicate rows", "path": "transformers/transformer_actions/row/drop_duplicate.py"}, "transformers/transformer_actions/row/filter.py:transformer:python:Filter rows:Row actions": {"block_type": "transformer", "groups": ["Row actions"], "language": "python", "name": "Filter rows", "path": "transformers/transformer_actions/row/filter.py"}, "transformers/transformer_actions/row/remove.py:transformer:python:Remove rows:Row actions": {"block_type": "transformer", "groups": ["Row actions"], "language": "python", "name": "Remove rows", "path": "transformers/transformer_actions/row/remove.py"}, "transformers/transformer_actions/row/sort.py:transformer:python:Sort rows:Row actions": {"block_type": "transformer", "groups": ["Row actions"], "language": "python", "name": "Sort rows", "path": "transformers/transformer_actions/row/sort.py"}, "transformers/transformer_actions/column/average.py:transformer:python:Average value of column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Average value of column", "path": "transformers/transformer_actions/column/average.py"}, "transformers/transformer_actions/column/count_distinct.py:transformer:python:Count unique values in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Count unique values in column", "path": "transformers/transformer_actions/column/count_distinct.py"}, "transformers/transformer_actions/column/first.py:transformer:python:First value in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "First value in column", "path": "transformers/transformer_actions/column/first.py"}, "transformers/transformer_actions/column/last.py:transformer:python:Last value in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Last value in column", "path": "transformers/transformer_actions/column/last.py"}, "transformers/transformer_actions/column/max.py:transformer:python:Maximum value in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Maximum value in column", "path": "transformers/transformer_actions/column/max.py"}, "transformers/transformer_actions/column/median.py:transformer:python:Median value in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Median value in column", "path": "transformers/transformer_actions/column/median.py"}, "transformers/transformer_actions/column/min.py:transformer:python:Min value in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Min value in column", "path": "transformers/transformer_actions/column/min.py"}, "transformers/transformer_actions/column/sum.py:transformer:python:Sum of all values in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Sum of all values in column", "path": "transformers/transformer_actions/column/sum.py"}, "transformers/transformer_actions/column/count.py:transformer:python:Total count of values in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Total count of values in column", "path": "transformers/transformer_actions/column/count.py"}, "transformers/transformer_actions/column/clean_column_name.py:transformer:python:Clean column name:Column actions:Formatting": {"block_type": "transformer", "groups": ["Column actions", "Formatting"], "language": "python", "name": "Clean column name", "path": "transformers/transformer_actions/column/clean_column_name.py"}, "transformers/transformer_actions/column/fix_syntax_errors.py:transformer:python:Fix syntax errors:Column actions:Formatting": {"block_type": "transformer", "groups": ["Column actions", "Formatting"], "language": "python", "name": "Fix syntax errors", "path": "transformers/transformer_actions/column/fix_syntax_errors.py"}, "transformers/transformer_actions/column/reformat.py:transformer:python:Reformat values in column:Column actions:Formatting": {"block_type": "transformer", "groups": ["Column actions", "Formatting"], "language": "python", "name": "Reformat values in column", "path": "transformers/transformer_actions/column/reformat.py"}, "transformers/transformer_actions/column/select.py:transformer:python:Keep column(s):Column actions:Column removal": {"block_type": "transformer", "groups": ["Column actions", "Column removal"], "language": "python", "name": "Keep column(s)", "path": "transformers/transformer_actions/column/select.py"}, "transformers/transformer_actions/column/remove.py:transformer:python:Remove column(s):Column actions:Column removal": {"block_type": "transformer", "groups": ["Column actions", "Column removal"], "language": "python", "name": "Remove column(s)", "path": "transformers/transformer_actions/column/remove.py"}, "transformers/transformer_actions/column/shift_down.py:transformer:python:Shift row values down:Column actions:Shift": {"block_type": "transformer", "groups": ["Column actions", "Shift"], "language": "python", "name": "Shift row values down", "path": "transformers/transformer_actions/column/shift_down.py"}, "transformers/transformer_actions/column/shift_up.py:transformer:python:Shift row values up:Column actions:Shift": {"block_type": "transformer", "groups": ["Column actions", "Shift"], "language": "python", "name": "Shift row values up", "path": "transformers/transformer_actions/column/shift_up.py"}, "transformers/transformer_actions/column/normalize.py:transformer:python:Normalize data:Column actions:Feature scaling": {"block_type": "transformer", "groups": ["Column actions", "Feature scaling"], "language": "python", "name": "Normalize data", "path": "transformers/transformer_actions/column/normalize.py"}, "transformers/transformer_actions/column/standardize.py:transformer:python:Standardize data:Column actions:Feature scaling": {"block_type": "transformer", "groups": ["Column actions", "Feature scaling"], "language": "python", "name": "Standardize data", "path": "transformers/transformer_actions/column/standardize.py"}, "transformers/transformer_actions/column/impute.py:transformer:python:Fill in missing values:Column actions:Data cleaning": {"block_type": "transformer", "groups": ["Column actions", "Data cleaning"], "language": "python", "name": "Fill in missing values", "path": "transformers/transformer_actions/column/impute.py"}, "transformers/transformer_actions/column/remove_outliers.py:transformer:python:Remove outliers:Column actions:Data cleaning": {"block_type": "transformer", "groups": ["Column actions", "Data cleaning"], "language": "python", "name": "Remove outliers", "path": "transformers/transformer_actions/column/remove_outliers.py"}, "transformers/transformer_actions/column/diff.py:transformer:python:Calculate difference between values:Column actions:Feature extraction": {"block_type": "transformer", "groups": ["Column actions", "Feature extraction"], "language": "python", "name": "Calculate difference between values", "path": "transformers/transformer_actions/column/diff.py"}, "data_exporters/default.jinja:data_exporter:python:Base template (generic)": {"block_type": "data_exporter", "language": "python", "name": "Base template (generic)", "path": "data_exporters/default.jinja"}, "data_exporters/file.py:data_exporter:python:Local file": {"block_type": "data_exporter", "language": "python", "name": "Local file", "path": "data_exporters/file.py"}, "data_exporters/google_sheets.py:data_exporter:python:Google Sheets": {"block_type": "data_exporter", "language": "python", "name": "Google Sheets", "path": "data_exporters/google_sheets.py"}, "data_exporters/s3.py:data_exporter:python:Amazon S3:Data lakes": {"block_type": "data_exporter", "groups": ["Data lakes"], "language": "python", "name": "Amazon S3", "path": "data_exporters/s3.py"}, "data_exporters/azure_blob_storage.py:data_exporter:python:Azure Blob Storage:Data lakes": {"block_type": "data_exporter", "groups": ["Data lakes"], "language": "python", "name": "Azure Blob Storage", "path": "data_exporters/azure_blob_storage.py"}, "data_exporters/google_cloud_storage.py:data_exporter:python:Google Cloud Storage:Data lakes": {"block_type": "data_exporter", "groups": ["Data lakes"], "language": "python", "name": "Google Cloud Storage", "path": "data_exporters/google_cloud_storage.py"}, "data_exporters/redshift.py:data_exporter:python:Amazon Redshift:Data warehouses": {"block_type": "data_exporter", "groups": ["Data warehouses"], "language": "python", "name": "Amazon Redshift", "path": "data_exporters/redshift.py"}, "data_exporters/bigquery.py:data_exporter:python:Google BigQuery:Data warehouses": {"block_type": "data_exporter", "groups": ["Data warehouses"], "language": "python", "name": "Google BigQuery", "path": "data_exporters/bigquery.py"}, "data_exporters/snowflake.py:data_exporter:python:Snowflake:Data warehouses": {"block_type": "data_exporter", "groups": ["Data warehouses"], "language": "python", "name": "Snowflake", "path": "data_exporters/snowflake.py"}, "data_exporters/algolia.py:data_exporter:python:Algolia:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "Algolia", "path": "data_exporters/algolia.py"}, "data_exporters/chroma.py:data_exporter:python:Chroma:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "Chroma", "path": "data_exporters/chroma.py"}, "data_exporters/duckdb.py:data_exporter:python:DuckDB:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "DuckDB", "path": "data_exporters/duckdb.py"}, "data_exporters/mysql.py:data_exporter:python:MySQL:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "MySQL", "path": "data_exporters/mysql.py"}, "data_exporters/oracledb.py:data_exporter:python:OracleDB:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "OracleDB", "path": "data_exporters/oracledb.py"}, "data_exporters/postgres.py:data_exporter:python:PostgreSQL:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "PostgreSQL", "path": "data_exporters/postgres.py"}, "data_exporters/qdrant.py:data_exporter:python:Qdrant:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "Qdrant", "path": "data_exporters/qdrant.py"}, "data_exporters/weaviate.py:data_exporter:python:Weaviate:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "Weaviate", "path": "data_exporters/weaviate.py"}, "sensors/default.py:sensor:python:Base template (generic)": {"block_type": "sensor", "language": "python", "name": "Base template (generic)", "path": "sensors/default.py"}, "sensors/s3.py:sensor:python:Amazon S3:Data lakes": {"block_type": "sensor", "groups": ["Data lakes"], "language": "python", "name": "Amazon S3", "path": "sensors/s3.py"}, "sensors/google_cloud_storage.py:sensor:python:Google Cloud Storage:Data lakes": {"block_type": "sensor", "groups": ["Data lakes"], "language": "python", "name": "Google Cloud Storage", "path": "sensors/google_cloud_storage.py"}, "sensors/redshift.py:sensor:python:Amazon Redshift:Data warehouses": {"block_type": "sensor", "groups": ["Data warehouses"], "language": "python", "name": "Amazon Redshift", "path": "sensors/redshift.py"}, "sensors/bigquery.py:sensor:python:Google BigQuery:Data warehouses": {"block_type": "sensor", "groups": ["Data warehouses"], "language": "python", "name": "Google BigQuery", "path": "sensors/bigquery.py"}, "sensors/snowflake.py:sensor:python:Snowflake:Data warehouses": {"block_type": "sensor", "groups": ["Data warehouses"], "language": "python", "name": "Snowflake", "path": "sensors/snowflake.py"}, "sensors/mysql.py:sensor:python:MySQL:Databases": {"block_type": "sensor", "groups": ["Databases"], "language": "python", "name": "MySQL", "path": "sensors/mysql.py"}, "sensors/postgres.py:sensor:python:PostgreSQL:Databases": {"block_type": "sensor", "groups": ["Databases"], "language": "python", "name": "PostgreSQL", "path": "sensors/postgres.py"}}}